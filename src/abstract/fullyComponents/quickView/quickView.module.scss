.quickViewImageContainer {
  cursor: pointer;

  aspect-ratio: 1 / 1; // force images to stay the same size regardless of them being originally different sizes

  display: flex;
  flex-direction: column;
  align-items: center;

  overflow: hidden; // allows quickview button not to bug by being hovered outside of the container

  flex: 1;

  width: 100%;
  background-color: var(--c-grey-100);

  position: relative;

  &:hover {
    .quickViewButtonComponentWrapper {
      transform: translateY(-40%);

      opacity: 1;
    }

    .productImage {
      &:nth-of-type(1) {
        opacity: 0 !important;
      }

      &:nth-of-type(2) {
        opacity: 1 !important;
      }
    }
  }

  .quickViewImageWrapper {
    width: 100%;
    min-height: 100%;
    position: relative;

    &:hover {
    }

    .productImage {
      position: absolute;
      left: 0;

      width: 100%;
      height: 100%;

      object-fit: contain;
      object-position: center;
      align-content: center;

      opacity: 0;

      &:nth-of-type(1) {
        transition: opacity 0.3s ease;
      }

      &:nth-of-type(2) {
        opacity: 0;
        transition: opacity 0.3s ease;
      }

      @media screen and (min-width: 1025px) {
        padding: var(--spacing-3);
      }
    }
  }
}

.loaded {
  opacity: 1 !important;
}

.quickViewButtonComponentWrapper {
  position: absolute;
  bottom: 0;

  height: 3vw;
  min-height: 40px;
  width: 80%;
  min-width: 75px;
  background-color: orange;

  display: flex;
  justify-content: center;
  align-items: center;
  transition: transform 0.2s ease, opacity 0.1s ease;
  opacity: 0;

  pointer-events: auto;

  // hover applies also to button, otherwise, button will close as the initial trigger is frm hovering it's sibling-element, which button will eventually cover partially
  &:hover {
    opacity: 1;
    transform: translateY(-40%);
  }
}
